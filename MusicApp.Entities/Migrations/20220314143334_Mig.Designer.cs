// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApp.Entities.Models;

namespace MusicApp.Entities.Migrations
{
    [DbContext(typeof(MusicAppDBContext))]
    [Migration("20220314143334_Mig")]
    partial class Mig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicApp.Entities.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoutryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CoutryId" }, "IX_Artists_CoutryId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoutryId = 1,
                            FirstName = "Erez",
                            LastName = "Duvdev",
                            StageName = "Infected Mushroom"
                        },
                        new
                        {
                            Id = 2,
                            CoutryId = 1,
                            FirstName = "Yuval",
                            LastName = "Terner",
                            StageName = "New Born"
                        },
                        new
                        {
                            Id = 3,
                            CoutryId = 2,
                            FirstName = "Mok",
                            LastName = "Row",
                            StageName = "Ice Cube"
                        },
                        new
                        {
                            Id = 4,
                            CoutryId = 4,
                            FirstName = "Kun",
                            LastName = "Jang",
                            StageName = "Samorai"
                        },
                        new
                        {
                            Id = 5,
                            CoutryId = 3,
                            FirstName = "Enrike",
                            LastName = "du",
                            StageName = "Enrike"
                        });
                });

            modelBuilder.Entity("MusicApp.Entities.Models.ArtistsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArtistId" }, "IX_Artists_Users_ArtistId");

                    b.HasIndex(new[] { "UserId" }, "IX_Artists_Users_UserId");

                    b.ToTable("Artists_Users");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Coutry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coutries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Use"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Japan"
                        });
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rock"
                        });
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfFounding")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Nano Records",
                            DayOfFounding = new DateTime(1990, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "ACD",
                            DayOfFounding = new DateTime(1977, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "RRE",
                            DayOfFounding = new DateTime(1955, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Watched")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId" }, "IX_Songs_AlbumId");

                    b.HasIndex(new[] { "ArtistId" }, "IX_Songs_ArtistId");

                    b.HasIndex(new[] { "GenreId" }, "IX_Songs_GenreId");

                    b.HasIndex(new[] { "PublisherId" }, "IX_Songs_PublisherId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.SongPlayedLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePlayed")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex(new[] { "UserId" }, "IX_SongPlayedLogs_UserId");

                    b.ToTable("SongPlayedLogs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.SongsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SongId" }, "IX_Songs_Users_SongId");

                    b.HasIndex(new[] { "UserId" }, "IX_Songs_Users_UserId");

                    b.ToTable("Songs_Users");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<int?>("PlayedNowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Ohad@gmail.com",
                            FirstName = "Ohad",
                            LastName = "Saadia",
                            Password = "11111111",
                            PermissionLevel = 0
                        });
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Album", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Artist", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Coutry", "Coutry")
                        .WithMany("Artists")
                        .HasForeignKey("CoutryId");

                    b.Navigation("Coutry");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.ArtistsUser", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Artist", "Artist")
                        .WithMany("ArtistsUsers")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Entities.Models.User", "User")
                        .WithMany("ArtistsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Song", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusicApp.Entities.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Entities.Models.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId");

                    b.HasOne("MusicApp.Entities.Models.Publisher", "Publisher")
                        .WithMany("Songs")
                        .HasForeignKey("PublisherId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.SongPlayedLog", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Entities.Models.User", "User")
                        .WithMany("UserListeningHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.SongsUser", b =>
                {
                    b.HasOne("MusicApp.Entities.Models.Song", "Song")
                        .WithMany("SongsUsers")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.Entities.Models.User", "User")
                        .WithMany("SongsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ArtistsUsers");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Coutry", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Genre", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Publisher", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.Song", b =>
                {
                    b.Navigation("SongsUsers");
                });

            modelBuilder.Entity("MusicApp.Entities.Models.User", b =>
                {
                    b.Navigation("ArtistsUsers");

                    b.Navigation("SongsUsers");

                    b.Navigation("UserListeningHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
